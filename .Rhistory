1+1
source('~/Coursera/R/practise.R')
x <- 6
y <- 5:10
source('~/Coursera/R/practise.R')
print(y)
x <- 6
y <- 5:10
print(y)
x <- 6
y <- 5:10
print(y)
12 + 8
12 + 8
12 * 64
name = "Bucky Roberts"
nchar(name)
name = "Bucky Roberts"
nchar(name)
nchar("name")
tuna <- as.Date("2014-06-28")
ham <- ("2014-06-28")
class(tuna)
class(ham)
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?
?c
info()
?c
z
info()
c(z,z)
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
info()
bye()
exit
bye()
swirl()
library("swirl")
library("swirl")
library("swirl")
swirl()
c(1,2,3,4) + c(0, 10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
swirl()
bye()
swirl()
bye()
swirl()
getwd()
play()
getwd()
library(swirl)
rm(list=ls())
swirl
swirl()
bye()
swirl
swirl()
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
c<-c(foo=11,bar=2,norf=NA)
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
?colnames
q()
swirl()
library(swirl)
rm(list=ls())
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5=7)
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || != 8 && 4 > 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical("twins","twins")
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(>0)
all(ints>0)
exit
list(rm.ls())
list(rm(ls())
)
swirl
library(swril)
library(swirl)
rm(list=ls())
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My firtst function!")
boring_function("My first function!")
boring_function
submit
submit()
submit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num=5)
remainder(4, div=2)
args(remainder)
submit()
func(sd, c(1.4,3.6,7.9))
evaluate(sd, c(1.4,3.6,7.9))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("programming", "is", "fun!")
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
submit()
submit()
help()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
telegram("thank", "you", "for", "helping", "me")
submit()
submit()
submit()
mad_libs("London", "running", "now")
submit()
"I" %p% "love" %p% "R!"
3^3
ls()
list.files
list.files()
library(test_function.R)
library("test_function.R")
?library
source("test_function.R")
source("test_function.R")
source("test_function.R")
y <- 0
y
class(y)
c <- 1:10
class(c)
source("test_function.R")
source("test_function.R")
z<-10
f(3)
source("test_function.R")
y
q()
?list.files
?which
which(LETTERS == "R")
LETTERS
which(11 <- c(TRUE, FALSE, TRUE, NA, FALSE, FALSE, TRUE)) #> 1 3 7
?which
which(ll <- c(TRUE, FALSE, TRUE, NA, FALSE, FALSE, TRUE)) #> 1 3 7
ls
ls()
?cor
class(1:4)
class(1)
class(1.5)
is.numeric(1)
is.numeric(1:4)
?is.numeric
is.integer(4)
is.integer(1:4)
is.integer(4.6)
is.integer(4)
is.integer(4L)
?complete.cases
q()
library(swril)
library("swril")
library("swirl")
swirl()
library("swirl")
rm(list=ls())
swril()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, n=10)
tail(plants, n=15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
library(swirl)
swirl()
6*7
5+7
0
0
bye()
list.files
list.files()
list.files(/rprog-013_Matrices_and_Data_Frames.txt)
dir()
getwd()
setwd("C:/Users/IBM_ADMIN/Dropbox/General/Data_Science/coursea/R")
dir
dir()
list.files("ProgrammingAssignment2")
path = list.files(""ProgrammingAssignment2")
path = list.files(ProgrammingAssignment2")
""
path = list.files("ProgrammingAssignment2")
path
source(c(path, "cachematrix.R"))
setwd("C:/Users/IBM_ADMIN/Dropbox/General/Data_Science/coursea/R/ProgrammingAssignment2")
list.files()
source("cachematrix.R")
a<-makeCacheMatrix()
a$set(matrix(1:4,2,2))
a$get()
b <- cacheSolve()
b <- cacheSolve(a)
b <- cacheSolve(matrix(1:4, 2, 2))
a$set(matrix(1:4,2,2))
cacheSolve(a)
rm(list=ls())
a
makeCacheMatrix
source("cachematrix.R")
makeCacheMatrix
makeCacheMatrix()
makeCacheMatrix(matrix(1:4,2,2))
a <- makeCacheMatrix()
a$set(matrix(1:4,2,2))
cacheSolve(a)
cacheSolve(a)
source("cachematrix.R")
source("cachematrix.R")
a$set(matrix(1:4,2,2))
rm(list=ls())
source("cachematrix.R")
a <- makeCacheMatrix()
a$set(matrix(1:4,2,2))
cacheSolve(a)
rm(list=ls())
source("cachematrix.R")
a$set(matrix(1:4,2,2))
a <- makeCacheMatrix()
a$set(matrix(1:4,2,2))
a$get
a$get()
cacheSolve(a)
cacheSolve(a$get())
rm(list=ls())
source("cachematrix.R")
a <- makeCacheMatrix()
a$set(matrix(1:4,2,2))
a$get()
cacheSolve(a$get())
traceback()
rm(list=ls())
source("cachematrix.R")
a <- makeCacheMatrix()
cacheSolve(a$get())
cacheSolve(a)
traceback()
cacheSolve(a$get())
